// Absolute Space

import java.awt.*;
import java.net.*;
import java.applet.Applet;
import java.applet.AudioClip;

public class DiverSim2 extends Applet implements Runnable
{
  Dimension	d;
  Font 		largefont = new Font("Helvetica", Font.PLAIN, 24);
  Font		smallfont = new Font("Helvetica", Font.PLAIN, 14);

  FontMetrics	fmsmall, fmlarge;
  Graphics	goff;
  Image		ii;
  Thread	thethread;

  boolean	ingame=true;

  int		x, y, mousex, mousey, oldx, oldy, dx=0, dy=0, count, shield=0;
  boolean	showtitle=true;
  Image		ship;
  Image[]	fire;
  int		firecnt=0;

  // Bullet variables
  Image		bullet;
  int[]		bx;
  int[]		by;
  final int	bmy=16, bul_xs=54, bul_ys=8;

  // Meteor variables
  Image		meteor;
  int		maxmet, metcount, mtotal, mrenew, metmy;
  int[]		metx;
  int[]		mety;
  int[]		metf;
  boolean[] 	metr;
  final int	sxmet=80, symet=84;

  // These are for the star field
  public int starsX[];
  public int starsY[];
  public Color starsC[];
  public int numStars = 30;
  public int speed = 6, xSize, ySize;

  // Variables for big boom
  Image[]	boom;
  int		rndbx, rndby, rndcnt=777;
  final int	sxbom=71, sybom=100, bframes=4;

  // Global Variables
  int		distance=0, maxdist=2000;
  int		slevel, blevel, difflev, bosslevel;
  int		smax, bmax;
  int		scur, bcur, renew, rcnt=0, sstretch, fksstretch, txtalign=100;
  long		score;

  // Sounds
  AudioClip	blast, crash, kill;

  // Bosses here
  // Sunbird
  boolean	sunbird, sbefore, safter;
  int		sbx, sby, sbmove, maxtribe, tribe;
  int[]		sbfx, sbfy;

  final int	maxshield=9;
  final int	backcol=0x102040;
  final int	fireframe=2;
  final int	borderwidth=0;
  final int	sxsize=90, sysize=39, sxfire=11, syfire=6;
  final int	movex=10, movey=5;
  final int	scoreheight=45;
  final int	screendelay=300;

  public String getAppletInfo()
  {
    return("Absolute Space - by Aleksey Udovydchenko");
  }

  public void init()
  {
    Graphics g;
    int n;
    d = size();
    setBackground(Color.black);
    g=getGraphics();
    g.setFont(smallfont);
    fmsmall = g.getFontMetrics();
    g.setFont(largefont);
    fmlarge = g.getFontMetrics();

    ship = getImage(getCodeBase(), "images/ship.gif");
    bullet = getImage(getCodeBase(), "images/bullet.gif");
    fire = new Image[fireframe];
    for (n=0; n<fireframe; n++)
    {
	fire[n] = getImage(getCodeBase(), "images/fire"+n+".gif");
    }

    xSize = d.width - borderwidth*2;
    ySize = d.height - borderwidth*2 - scoreheight;

    x = (xSize - sxsize) / 2;
    y = ySize - sysize - scoreheight - borderwidth;
    mousex = -1;

    bx = new int[blevel*10];
    by = new int[blevel*10];

    for (n=0; n<blevel*10; n++)
    {
	bx[n] = -1;
    }

    initStars();

    rndcnt = 777;

  }

   // This creates the starfield in the background
   public void initStars ()
   {
      starsX = new int[numStars];
      starsY = new int[numStars];
      starsC = new Color[numStars];

      for (int i = 0; i < numStars; i++)
      {
         starsX[i] = (int) ((Math.random() * xSize - 1) + 1);
         starsY[i] = (int) ((Math.random() * ySize - 1) + 1);
         starsC[i] = NewColor();
      }
   }

  public boolean keyDown(Event e, int key)
  {
    if (ingame)
    {
      mousex = -1;
      if (key == Event.LEFT)
          dx=-1;
      if (key == Event.RIGHT)
        dx=1;
      if (key == Event.UP)
          dy=-1;
      if (key == Event.DOWN)
        dy=1;
      if (key == Event.ESCAPE)
        ingame=false;
    }
    else
    {
      if (key == 's' || key == 'S')
      {
        ingame=true;
	GameStart();
      }
    }
    return true;
  }

  public boolean keyUp(Event e, int key)
  {
    System.out.println("Key: "+key);
    if (key == Event.LEFT || key == Event.RIGHT)
       dx=0;
    if (key == Event.UP || key == Event.DOWN)
       dy=0;
    return true;
  }

  public void paint(Graphics g)
  {
    String s;
    Graphics gg;

    if (goff==null && d.width>0 && d.height>0)
    {
      ii = createImage(d.width, d.height);
      goff = ii.getGraphics();
    }
    if (goff==null || ii==null)
      return;

    goff.setColor(Color.black);
    goff.fillRect(0, 0, d.width, d.height);

    PlayGame();
    g.drawImage(ii, 0, 0, this);
  }

   public void PlayGame()
   {
      MoveShip();
      DrawPlayField();

      ShowScore();
      distance++;
      score+=100;
   }

   public void DrawPlayField()
   {

      // Show stars
      moveStars();

      for (int a = 0; a < numStars; a++)
      {
         goff.setColor(starsC[a]);
         goff.drawRect(starsX[a], starsY[a], 1, 1);
      }

      goff.drawImage(ship, x, y, this); // paint ship

      if (firecnt != 0)
      {
         goff.drawImage(fire[firecnt-1], x+( (sxsize-sxfire) / 2 ), y+sysize, this); // engine fire
      }

      firecnt++;
      if (firecnt > 2) firecnt=0;

      if (shield>0)
      {
         goff.setColor(new Color(0x00ffff));
         goff.drawOval(x-shield, y-shield, sxsize+shield*2, sysize+shield*2);
         shield--;
      }
   }

   public void ShowScore()
   {
      String s;
      int my;
      sstretch = (xSize-txtalign*2)/Math.max(bmax,smax);
      fksstretch = - (ySize-txtalign*2)/Math.max(bmax,smax);

      // Laser bar
      my = d.height-scoreheight+10;
      goff.setColor(new Color(0x00ff96));
      goff.drawRect(txtalign, my-10, bmax*sstretch, 10);
      goff.setFont(smallfont);
      s="laser: "+bcur+"/"+bmax;
      goff.fillRect(txtalign, my-10, bcur*sstretch, 10);
      goff.drawString(s,10,my);

      // Shield bar
      my += 15;
      goff.setColor(new Color(0x00ffff));
      goff.drawRect(txtalign, my-10, smax*sstretch, 10);
      goff.setFont(smallfont);
      s="shield: "+scur+"/"+smax;
      goff.fillRect(txtalign, my-10, scur*sstretch, 10);
      goff.drawString(s,10,my);
      
      // Score
      my += 20;
      goff.setColor(new Color(0xffffff));
      goff.setFont(largefont);
      s="score: "+score;
      goff.drawString(s,10,my);

      // Test bar
      my =0;
      goff.setColor(new Color(0x00dd96));
      goff.drawRect(txtalign, my-10, 10, smax*fksstretch);
      goff.setFont(smallfont);
      s="test: "+bcur+"/"+bmax;
      goff.fillRect(txtalign, my-10, 10, bcur*fksstretch);
      goff.drawString(s,10,my);
  }

  public void MoveShip()
  {
    int xx, yy;
    oldx = x;
    oldy = y;

    xx = mousex;
    if (xx>0)
    {
	yy = mousey;
	if (xx<x) dx=-1;
	if (xx>x+sxsize) dx=1;
	if (yy<y) dy=-1;
	if (yy>y+sysize) dy=1;
	if (xx>x & xx<x+sxsize & yy>y & yy<y+sysize)
        {
	  dx = 0;
	  dy = 0;
	  mousex = -1;
	}
    }

    x+=dx*movex;
    y+=dy*movey;

    if (y<=borderwidth || y>=(d.height-sysize-scoreheight))
    {
      dy=0;
      y=oldy;
    }
    if (x>=(d.width-borderwidth-sxsize) || x<=borderwidth)
    {
      dx=0;
      x=oldx;
    }
  }

   // Make the stars go from left to right to simulate moving through the water
   public void moveStars ()
   {
      for (int i = 0; i < numStars; i++)
      {
         if (starsX[i] - 1 < 0 - (speed * 2 ))
         {
            starsX[i] = xSize;
            starsY[i] = (int) ((Math.random() * ySize - 1) + 1);
	    starsC[i] = NewColor();
         }
         else
         {
            starsX[i] -= speed;
         }
      }
   }

  public Color NewColor()
  {
   int[] rgb;
   int t;
   rgb = new int[3];
   for (int i=0; i<3; i++) rgb[i] = 0;
   t = (int) (Math.random()*3);
   rgb[t] = (int) (Math.random()*128 + 1) + 127;
   return new Color(rgb[0], rgb[1], rgb[2]);
  }

   public void run()
   {
      long  starttime;
      Graphics g;

      Thread.currentThread().setPriority(Thread.MAX_PRIORITY);
      g=getGraphics();

      while(true)
      {
         starttime=System.currentTimeMillis();
         try
         {
            paint(g);
            starttime += 30;
            Thread.sleep(Math.max(0, starttime-System.currentTimeMillis()));
         }
         catch (InterruptedException e)
         {
            break;
         }
      }
   }

   public void start()
   {
      if (thethread == null)
      {
         thethread = new Thread(this);
         thethread.start();
      }
   }

   public void stop()
   {
      if (thethread != null)
      {
         thethread.stop();
         thethread = null;
      }
   }

   // This function handles mouse clicking
   public boolean mouseDown(Event e,int xx,int yy)
   {
      if (ingame)
      {
         mousex = xx;
	 mousey = yy;
	 keyDown(e, 32);
      }
      else
      {
         keyDown(e, 'S');
      }
      return true;
   }

  // Game Start
  public void GameStart()
  {
    // Set Up Ship variables
    bmax = blevel*blevel;
    bcur = bmax;
    smax = slevel*slevel;
    scur = smax;
    difflev = 3;
    distance=0;
    score=0;
    renew=250;
    for (int n=0; n<maxmet; n++) {
	metx[n] = -1;
	metf[n] = 0;
	metr[n] = true;
    }
    metcount=0;
    metmy=2;
    mrenew=60;

  }

  // Game Over
  public void GameOver()
  {
	ingame=true;
  }

}
